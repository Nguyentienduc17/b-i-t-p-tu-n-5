def is_prime(n):
    if n <= 1:
        return False
    for i in range(2, int(n**0.5) + 1):
        if n % i == 0:
            return False
    return True

def generate_blum_numbers(N):
    blum_numbers = []
    primes = []
    
    # Tạo danh sách số nguyên tố nhỏ hơn N
    for i in range(2, N):
        if is_prime(i):
            primes.append(i)
    
    # Tạo số Blum từ các số nguyên tố lẻ
    for i in range(len(primes)):
        for j in range(i + 1, len(primes)):
            product = primes[i] * primes[j]
            if product < N:
                blum_numbers.append(product)
            else:
                break

    return sorted(set(blum_numbers))  # Trả về danh sách số Blum duy nhất

def is_blum_number(blum_numbers, M):
    return M in blum_numbers

def find_blum_pairs(blum_numbers):
    pairs = []
    blum_set = set(blum_numbers)  # Chuyển thành set để tìm kiếm nhanh hơn
    
    for i in range(len(blum_numbers)):
        for j in range(i, len(blum_numbers)):
            total = blum_numbers[i] + blum_numbers[j]
            if total in blum_set:
                pairs.append((blum_numbers[i], blum_numbers[j]))
                
    return pairs

# Nhập số N từ người dùng
N = int(input("Nhập số N: "))
blum_numbers = generate_blum_numbers(N)

# In danh sách số Blum
print("Danh sách số Blum nhỏ hơn", N, ":", blum_numbers)

# Tìm tất cả các cặp số Blum
blum_pairs = find_blum_pairs(blum_numbers)
print("Các cặp số Blum có tổng cũng là số Blum nhỏ hơn N:")
for pair in blum_pairs:
    print(pair)

# Kiểm tra xem số M có tồn tại trong danh sách số Blum không
M = int(input("Nhập số M để kiểm tra: "))
if is_blum_number(blum_numbers, M):
    print(M, "tồn tại trong dãy số Blum.")
else:
    print(M, "không tồn tại trong dãy số Blum.")

